version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  send-fail-to-slack:
    description: Send message to slack about fail
    steps:
      - slack/notify:
          event: fail
          #https://app.slack.com/block-kit-builder/
          custom: |
            {
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Build failed",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "Build #[${CIRCLE_BUILD_NUM}](${CIRCLE_BUILD_URL}) failed on job: ${CIRCLE_STAGE}.\n\nCommitID: ${CIRCLE_SHA1:0:7}\nRepository: ${CIRCLE_REPOSITORY_URL}"
            			},
            			"accessory": {
            				"type": "image",
            				"image_url": "https://static.onecms.io/wp-content/uploads/sites/20/2018/05/21042210_264995290674140_8840525631411191808_n.jpg",
            				"alt_text": "sad cat"
            			}
            		}
            	]
            }
  send-success-to-slack:
    description: Send message to slack about success
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Build passed",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "Build #[${CIRCLE_BUILD_NUM}](${CIRCLE_BUILD_URL}) passed stage ${CIRCLE_STAGE}.\n\nCommitID: ${CIRCLE_SHA1:0:7}\nRepository: ${CIRCLE_REPOSITORY_URL}}"
            			},
            			"accessory": {
            				"type": "image",
            				"image_url": "https://static.boredpanda.com/blog/wp-content/uploads/2015/09/Happy-Cats__880.jpg",
            				"alt_text": "happy cat"
            			}
            		}
            	]
            } 

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
 #   parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
#      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
           
jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
             cd backend
             npm i 
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - send-fail-to-slack
      - send-success-to-slack
          
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - send-fail-to-slack
      - send-success-to-slack

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i 
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     # Checkout code from git
      - checkout
     # Restore from cache
      - restore_cache:
          keys: [backend-build]
     # Your job code here
      - run:
          name: Test backend
          command: |
            cd backend
            npm i 
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan frontend
          command: |
            cd backend
            npm audit --audit-level=critical    

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
     # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit --audit-level=critical   
        
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
      # Docker image here that supports AWS CLI
    steps:
      - checkout        # Checkout code from git
      - run: yum install -y tar gzip   #Install tar and gzip to use workspaces
##      - run:
##          name: Ensure back-end infrastructure exists
##          command: |
##            aws cloudformation deploy \
##            --template-file infra/backend.yml \
##            --tags Project=Udapeople \
##            --stack-name udacity-backend-${CIRCLE_SHA1:0:7} \
##            --parameter-overrides ID=${CIRCLE_SHA1:0:7} 
###TODO Programmatically save the new back-end url to memory or disk for later use (the front-end needs it). 
###TODO This could be done with MemStash.io.
##      - run:
##          name: Ensure front-end infrastructure exist
##          command: |
##            aws cloudformation deploy \
##            --template-file infra/frontend.yml \
##            --tags Project=Udapeople \
##            --stack-name udacity-frontend-${CIRCLE_SHA1:0:7}  \
##            --parameter-overrides ID=${CIRCLE_SHA1:0:7}  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ansible/inventory.txt
            aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=Udapeople" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ansible/inventory.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - project/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: circleci/python        # Docker image here that supports Ansible
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout             # Checkout code from git
      - run: cat /tmp/workspace/project/ansible/inventory.txt            
      - run: python -m pip install --user ansible  #install ansible
      - add_ssh_keys:             # Add ssh keys with fingerprint
          fingerprints:
            - "16:2a:a4:6f:d5:e5:f3:89:0b:90:ba:0f:58:3d:1f:ca"
      - run:
          name: Install dependencies & configure server
          command: |
            ansible-playbook ansible/configure-server.yml -i /tmp/workspace/project/ansible/inventory.txt 

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node 
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli 
      # Docker image here that supports AWS CLI
    steps:
      - checkout 
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: circleci/python 
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:latest
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli 
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli 
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  ansible:
    jobs:
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]     
#MM   default:
#MM     jobs:
#MM       - build-frontend:
#MM           context:
#MM             - SLACK
#MM       - build-backend:
#MM           context:
#MM             - SLACK
#MM #      - test-frontend:
#MM #          requires: [build-frontend]
#MM #      - test-backend:
#MM #          requires: [build-backend]
#MM       - scan-backend:
#MM           requires: [build-backend]
#MM       - scan-frontend:
#MM           requires: [build-frontend]
#MM       - deploy-infrastructure:
#MM #          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#MM           requires: [scan-frontend, scan-backend]
#MM #          filters:
#MM #            branches:
#MM #              only: [test-feature-branch]
#MM       - configure-infrastructure:
#MM           requires: [deploy-infrastructure]
#MM #      - run-migrations:
#MM #          requires: [configure-infrastructure]
#MM #      - deploy-frontend:
#MM #          requires: [run-migrations]
#MM #      - deploy-backend:
#MM #          requires: [run-migrations]
#MM #      - smoke-test:
#MM #          requires: [deploy-backend, deploy-frontend]
#MM #      - cloudfront-update:
#MM #          requires: [smoke-test]
#MM #      - cleanup:
#MM #          requires: [cloudfront-update]